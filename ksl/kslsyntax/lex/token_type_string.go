// Code generated by "stringer -type TokenType -output token_type_string.go"; DO NOT EDIT.

package lex

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenLBrace-123]
	_ = x[TokenRBrace-125]
	_ = x[TokenLBrack-91]
	_ = x[TokenRBrack-93]
	_ = x[TokenLParen-40]
	_ = x[TokenRParen-41]
	_ = x[TokenHeredocBegin-72]
	_ = x[TokenHeredocEnd-104]
	_ = x[TokenEqual-61]
	_ = x[TokenBang-33]
	_ = x[TokenDot-46]
	_ = x[TokenComma-44]
	_ = x[TokenQuestion-63]
	_ = x[TokenColon-58]
	_ = x[TokenAt-64]
	_ = x[TokenDollar-36]
	_ = x[TokenBoolLit-66]
	_ = x[TokenNullLit-110]
	_ = x[TokenQuotedLit-81]
	_ = x[TokenStringLit-83]
	_ = x[TokenNumberLit-78]
	_ = x[TokenIntegerLit-100]
	_ = x[TokenFloatLit-102]
	_ = x[TokenIdent-105]
	_ = x[TokenQualifiedIdent-73]
	_ = x[TokenComment-67]
	_ = x[TokenDocComment-68]
	_ = x[TokenNewline-10]
	_ = x[TokenEOF-9220]
	_ = x[TokenApostrophe-39]
	_ = x[TokenBacktick-96]
	_ = x[TokenSemicolon-59]
	_ = x[TokenTabs-9225]
	_ = x[TokenInvalid-65533]
	_ = x[TokenBadUTF8-128169]
	_ = x[TokenQuotedNewline-9252]
	_ = x[TokenNil-0]
}

const _TokenType_name = "TokenNilTokenNewlineTokenBangTokenDollarTokenApostropheTokenLParenTokenRParenTokenCommaTokenDotTokenColonTokenSemicolonTokenEqualTokenQuestionTokenAtTokenBoolLitTokenCommentTokenDocCommentTokenHeredocBeginTokenQualifiedIdentTokenNumberLitTokenQuotedLitTokenStringLitTokenLBrackTokenRBrackTokenBacktickTokenIntegerLitTokenFloatLitTokenHeredocEndTokenIdentTokenNullLitTokenLBraceTokenRBraceTokenEOFTokenTabsTokenQuotedNewlineTokenInvalidTokenBadUTF8"

var _TokenType_map = map[TokenType]string{
	0:      _TokenType_name[0:8],
	10:     _TokenType_name[8:20],
	33:     _TokenType_name[20:29],
	36:     _TokenType_name[29:40],
	39:     _TokenType_name[40:55],
	40:     _TokenType_name[55:66],
	41:     _TokenType_name[66:77],
	44:     _TokenType_name[77:87],
	46:     _TokenType_name[87:95],
	58:     _TokenType_name[95:105],
	59:     _TokenType_name[105:119],
	61:     _TokenType_name[119:129],
	63:     _TokenType_name[129:142],
	64:     _TokenType_name[142:149],
	66:     _TokenType_name[149:161],
	67:     _TokenType_name[161:173],
	68:     _TokenType_name[173:188],
	72:     _TokenType_name[188:205],
	73:     _TokenType_name[205:224],
	78:     _TokenType_name[224:238],
	81:     _TokenType_name[238:252],
	83:     _TokenType_name[252:266],
	91:     _TokenType_name[266:277],
	93:     _TokenType_name[277:288],
	96:     _TokenType_name[288:301],
	100:    _TokenType_name[301:316],
	102:    _TokenType_name[316:329],
	104:    _TokenType_name[329:344],
	105:    _TokenType_name[344:354],
	110:    _TokenType_name[354:366],
	123:    _TokenType_name[366:377],
	125:    _TokenType_name[377:388],
	9220:   _TokenType_name[388:396],
	9225:   _TokenType_name[396:405],
	9252:   _TokenType_name[405:423],
	65533:  _TokenType_name[423:435],
	128169: _TokenType_name[435:447],
}

func (i TokenType) String() string {
	if str, ok := _TokenType_map[i]; ok {
		return str
	}
	return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
}
