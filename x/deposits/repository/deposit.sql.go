// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: deposit.sql

package repository

import (
	"context"
)

const commitDeposits = `-- name: CommitDeposits :exec
WITH deleted_deposits AS (
    DELETE FROM deposits
    WHERE height <= $1
    RETURNING id, tx_hash, wallet, amount, height
)
INSERT INTO wallets (wallet, balance)
SELECT deleted_deposits.wallet, deleted_deposits.amount
FROM deleted_deposits
ON CONFLICT (wallet) DO UPDATE SET balance = wallets.balance + (
    SELECT deleted_deposits.amount
    FROM deleted_deposits
    WHERE wallets.wallet = deleted_deposits.wallet
)
`

func (q *Queries) CommitDeposits(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.commitDepositsStmt, commitDeposits, height)
	return err
}

const deposit = `-- name: Deposit :exec
INSERT INTO
    deposits (tx_hash, wallet, amount, height)
VALUES
    ($1, $2, $3, $4)
`

type DepositParams struct {
	TxHash string
	Wallet string
	Amount string
	Height int64
}

func (q *Queries) Deposit(ctx context.Context, arg *DepositParams) error {
	_, err := q.exec(ctx, q.depositStmt, deposit,
		arg.TxHash,
		arg.Wallet,
		arg.Amount,
		arg.Height,
	)
	return err
}

const getDepositByTx = `-- name: GetDepositByTx :one
SELECT id
FROM deposits
WHERE tx_hash = $1
`

func (q *Queries) GetDepositByTx(ctx context.Context, txHash string) (int32, error) {
	row := q.queryRow(ctx, q.getDepositByTxStmt, getDepositByTx, txHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}
