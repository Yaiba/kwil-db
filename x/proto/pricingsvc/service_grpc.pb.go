// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: kwil/pricingsvc/service.proto

package pricingsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	entity "kwil/x/pricing/entity"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KwilServiceClient is the client API for KwilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KwilServiceClient interface {
	EstimateCost(ctx context.Context, in *entity.EstimateRequest, opts ...grpc.CallOption) (*entity.EstimateResponse, error)
}

type kwilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKwilServiceClient(cc grpc.ClientConnInterface) KwilServiceClient {
	return &kwilServiceClient{cc}
}

func (c *kwilServiceClient) EstimateCost(ctx context.Context, in *entity.EstimateRequest, opts ...grpc.CallOption) (*entity.EstimateResponse, error) {
	out := new(entity.EstimateResponse)
	err := c.cc.Invoke(ctx, "/pricingsvc.KwilService/EstimateCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KwilServiceServer is the server API for KwilService service.
// All implementations must embed UnimplementedKwilServiceServer
// for forward compatibility
type KwilServiceServer interface {
	EstimateCost(context.Context, *entity.EstimateRequest) (*entity.EstimateResponse, error)
	mustEmbedUnimplementedKwilServiceServer()
}

// UnimplementedKwilServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKwilServiceServer struct {
}

func (UnimplementedKwilServiceServer) EstimateCost(context.Context, *entity.EstimateRequest) (*entity.EstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateCost not implemented")
}
func (UnimplementedKwilServiceServer) mustEmbedUnimplementedKwilServiceServer() {}

// UnsafeKwilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KwilServiceServer will
// result in compilation errors.
type UnsafeKwilServiceServer interface {
	mustEmbedUnimplementedKwilServiceServer()
}

func RegisterKwilServiceServer(s grpc.ServiceRegistrar, srv KwilServiceServer) {
	s.RegisterService(&KwilService_ServiceDesc, srv)
}

func _KwilService_EstimateCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.EstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KwilServiceServer).EstimateCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricingsvc.KwilService/EstimateCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KwilServiceServer).EstimateCost(ctx, req.(*entity.EstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KwilService_ServiceDesc is the grpc.ServiceDesc for KwilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KwilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricingsvc.KwilService",
	HandlerType: (*KwilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateCost",
			Handler:    _KwilService_EstimateCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kwil/pricingsvc/service.proto",
}
