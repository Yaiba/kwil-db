// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAttributeStmt, err = db.PrepareContext(ctx, createAttribute); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAttribute: %w", err)
	}
	if q.createColumnStmt, err = db.PrepareContext(ctx, createColumn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateColumn: %w", err)
	}
	if q.createDatabaseStmt, err = db.PrepareContext(ctx, createDatabase); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDatabase: %w", err)
	}
	if q.createIndexStmt, err = db.PrepareContext(ctx, createIndex); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIndex: %w", err)
	}
	if q.createQueryStmt, err = db.PrepareContext(ctx, createQuery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuery: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createTableStmt, err = db.PrepareContext(ctx, createTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTable: %w", err)
	}
	if q.dropDatabaseStmt, err = db.PrepareContext(ctx, dropDatabase); err != nil {
		return nil, fmt.Errorf("error preparing query DropDatabase: %w", err)
	}
	if q.roleApplyQueryStmt, err = db.PrepareContext(ctx, roleApplyQuery); err != nil {
		return nil, fmt.Errorf("error preparing query RoleApplyQuery: %w", err)
	}
	if q.roleApplyWalletStmt, err = db.PrepareContext(ctx, roleApplyWallet); err != nil {
		return nil, fmt.Errorf("error preparing query RoleApplyWallet: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAttributeStmt != nil {
		if cerr := q.createAttributeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAttributeStmt: %w", cerr)
		}
	}
	if q.createColumnStmt != nil {
		if cerr := q.createColumnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createColumnStmt: %w", cerr)
		}
	}
	if q.createDatabaseStmt != nil {
		if cerr := q.createDatabaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDatabaseStmt: %w", cerr)
		}
	}
	if q.createIndexStmt != nil {
		if cerr := q.createIndexStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIndexStmt: %w", cerr)
		}
	}
	if q.createQueryStmt != nil {
		if cerr := q.createQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQueryStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createTableStmt != nil {
		if cerr := q.createTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTableStmt: %w", cerr)
		}
	}
	if q.dropDatabaseStmt != nil {
		if cerr := q.dropDatabaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropDatabaseStmt: %w", cerr)
		}
	}
	if q.roleApplyQueryStmt != nil {
		if cerr := q.roleApplyQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleApplyQueryStmt: %w", cerr)
		}
	}
	if q.roleApplyWalletStmt != nil {
		if cerr := q.roleApplyWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleApplyWalletStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createAttributeStmt *sql.Stmt
	createColumnStmt    *sql.Stmt
	createDatabaseStmt  *sql.Stmt
	createIndexStmt     *sql.Stmt
	createQueryStmt     *sql.Stmt
	createRoleStmt      *sql.Stmt
	createTableStmt     *sql.Stmt
	dropDatabaseStmt    *sql.Stmt
	roleApplyQueryStmt  *sql.Stmt
	roleApplyWalletStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createAttributeStmt: q.createAttributeStmt,
		createColumnStmt:    q.createColumnStmt,
		createDatabaseStmt:  q.createDatabaseStmt,
		createIndexStmt:     q.createIndexStmt,
		createQueryStmt:     q.createQueryStmt,
		createRoleStmt:      q.createRoleStmt,
		createTableStmt:     q.createTableStmt,
		dropDatabaseStmt:    q.dropDatabaseStmt,
		roleApplyQueryStmt:  q.roleApplyQueryStmt,
		roleApplyWalletStmt: q.roleApplyWalletStmt,
	}
}
