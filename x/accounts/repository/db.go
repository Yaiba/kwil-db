// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.decreaseBalanceStmt, err = db.PrepareContext(ctx, decreaseBalance); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseBalance: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getHeightStmt, err = db.PrepareContext(ctx, getHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeight: %w", err)
	}
	if q.getHeightByNameStmt, err = db.PrepareContext(ctx, getHeightByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeightByName: %w", err)
	}
	if q.increaseBalanceStmt, err = db.PrepareContext(ctx, increaseBalance); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseBalance: %w", err)
	}
	if q.setHeightStmt, err = db.PrepareContext(ctx, setHeight); err != nil {
		return nil, fmt.Errorf("error preparing query SetHeight: %w", err)
	}
	if q.spendStmt, err = db.PrepareContext(ctx, spend); err != nil {
		return nil, fmt.Errorf("error preparing query Spend: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.decreaseBalanceStmt != nil {
		if cerr := q.decreaseBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseBalanceStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getHeightStmt != nil {
		if cerr := q.getHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightStmt: %w", cerr)
		}
	}
	if q.getHeightByNameStmt != nil {
		if cerr := q.getHeightByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightByNameStmt: %w", cerr)
		}
	}
	if q.increaseBalanceStmt != nil {
		if cerr := q.increaseBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseBalanceStmt: %w", cerr)
		}
	}
	if q.setHeightStmt != nil {
		if cerr := q.setHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setHeightStmt: %w", cerr)
		}
	}
	if q.spendStmt != nil {
		if cerr := q.spendStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing spendStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	decreaseBalanceStmt *sql.Stmt
	getAccountStmt      *sql.Stmt
	getHeightStmt       *sql.Stmt
	getHeightByNameStmt *sql.Stmt
	increaseBalanceStmt *sql.Stmt
	setHeightStmt       *sql.Stmt
	spendStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		decreaseBalanceStmt: q.decreaseBalanceStmt,
		getAccountStmt:      q.getAccountStmt,
		getHeightStmt:       q.getHeightStmt,
		getHeightByNameStmt: q.getHeightByNameStmt,
		increaseBalanceStmt: q.increaseBalanceStmt,
		setHeightStmt:       q.setHeightStmt,
		spendStmt:           q.spendStmt,
	}
}
