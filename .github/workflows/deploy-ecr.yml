on:
  push:
    branches: [ 'release/*' ]
  workflow_dispatch:
    branches: [ 'release/*' ]

name: kwil-aws-push

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.KWIL_MACH_SECRET }}

    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        version: '3.x'
        repo-token: ${{ secrets.KWIL_MACH_SECRET }}

    - name: Install Taskfile
      uses: arduino/setup-task@v1

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.19.0'
        cache: true

    - name: Install dependencies
      run: |
        go version
        go mod download
        task deps

    - name: Compile Protobuf
      run: |
        task pb:compile:all

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: manual git tag
      run: echo "GIT_TAG=`echo $(git describe --match 'v[0-9]*' --dirty --always --tags | sed 's/^v//')`" >> $GITHUB_ENV

    - name: manual build time
      run: echo "BUILD_TIME=`TZ=UTC date -u --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +"%Y-%m-%dT%H:%M:%SZ"`" >> $GITHUB_ENV

    - name: Cache Docker layers for kwild
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-kwild
        key: ${{ runner.os }}-buildx-kwild-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-kwild

    - name: Build kwild image, push to Amazon ECR
      id: docker_build_kwild
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        builder: ${{ steps.buildx.outputs.name }}
        build-args: |
          git_commit=${{ github.sha }}
          version=${{ env.GIT_TAG }}
          build_time=${{ env.BUILD_TIME }}
        file: ./build/package/docker/kwild.dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWILD_ECR }}:${{ env.GIT_TAG }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWILD_ECR }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache-kwild
        cache-to: type=local,dest=/tmp/.buildx-cache-kwild-new

    - name: Cache Docker layers for kwil-gateway
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-kgw
        key: ${{ runner.os }}-buildx-kgw-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-kgw

    - name: Build kwil-gateway image, push to Amazon ECR
      id: docker_build_kgw
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        builder: ${{ steps.buildx.outputs.name }}
        build-args: |
          git_commit=${{ github.sha }}
          version=${{ env.GIT_TAG }}
          build_time=${{ env.BUILD_TIME }}
        file: ./build/package/docker/kwil-gateway.dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWIL_GATEWAY_ECR }}:${{ env.GIT_TAG }},${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_KWIL_GATEWAY_ECR }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache-kgw
        cache-to: type=local,dest=/tmp/.buildx-cache-kgw-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache-kwild
        mv /tmp/.buildx-cache-kwild-new /tmp/.buildx-cache-kwild
        rm -rf /tmp/.buildx-cache-kgw
        mv /tmp/.buildx-cache-kgw-new /tmp/.buildx-cache-kgw

#
#
#    - name: Build(KD), tag, and push docker image to Amazon ECR (used with ECS Fargate)
#      env:
#        DOCKER_BUILDKIT: 1
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY1: ${{ secrets.AWS_KWILD_ECR }}
#        ECR_REPOSITORY2: ${{ secrets.AWS_KWIL_GATEWAY_ECR }}
#        IMAGE_HASH_TAG: ${{ github.sha }}
#        IMAGE_SHORT_HASH_TAG: ${{ steps.vars.outputs.sha_short }}
#        IMAGE_VERSION: ${{ steps.vers.version.val}}
#        IMAGE_TAG: latest
#      run: |
#        # Build a docker container and push it to ECR
#        #docker build -f ./build/package/docker/kwild.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY1:kd$IMAGE_HASH_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY1:$IMAGE_TAG .
#        docker build -f ./build/package/docker/kwild.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY1:$IMAGE_TAG .
#        echo "Pushing images to ECR..."
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY1 --all-tags
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY1 --all-tags" >> $GITHUB_OUTPUT
#
#    - name: Build(KG), tag, and push docker image to Amazon ECR (used with ECS Fargate)
#      env:
#        DOCKER_BUILDKIT: 1
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY1: ${{ secrets.AWS_KWILD_ECR }}
#        ECR_REPOSITORY2: ${{ secrets.AWS_KWIL_GATEWAY_ECR }}
#        IMAGE_HASH_TAG: ${{ github.sha }}
#        IMAGE_SHORT_HASH_TAG: ${{ steps.vars.outputs.sha_short }}
#        IMAGE_VERSION: ${{ steps.vers.version.val}}
#        IMAGE_TAG: latest
#      run: |
#        # Build a docker container and push it to ECR
#        docker build -f ./build/package/docker/kwil-gateway.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY2:$IMAGE_TAG .
#        echo "Pushing images to ECR..."
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY2 --all-tags
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY2 --all-tags" >> $GITHUB_OUTPUT
