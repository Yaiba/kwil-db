// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: column.sql

package gen

import (
	"context"
)

const createAttribute = `-- name: CreateAttribute :exec
INSERT INTO
    attributes (column_id, attribute_type, attribute_value)
VALUES
    (
        $1,
        $2,
        $3
    )
`

type CreateAttributeParams struct {
	ColumnID       int32
	AttributeType  int32
	AttributeValue []byte
}

func (q *Queries) CreateAttribute(ctx context.Context, arg *CreateAttributeParams) error {
	_, err := q.exec(ctx, q.createAttributeStmt, createAttribute, arg.ColumnID, arg.AttributeType, arg.AttributeValue)
	return err
}

const createColumn = `-- name: CreateColumn :exec
INSERT INTO
    COLUMNS (table_id, column_name, column_type)
VALUES
    (
        $1,
        $2,
        $3
    )
`

type CreateColumnParams struct {
	TableID    int32
	ColumnName string
	ColumnType int32
}

func (q *Queries) CreateColumn(ctx context.Context, arg *CreateColumnParams) error {
	_, err := q.exec(ctx, q.createColumnStmt, createColumn, arg.TableID, arg.ColumnName, arg.ColumnType)
	return err
}

const getAttributes = `-- name: GetAttributes :many
SELECT
    attribute_type,
    attribute_value
FROM
    attributes
WHERE
    column_id = $1
`

type GetAttributesRow struct {
	AttributeType  int32
	AttributeValue []byte
}

func (q *Queries) GetAttributes(ctx context.Context, columnID int32) ([]*GetAttributesRow, error) {
	rows, err := q.query(ctx, q.getAttributesStmt, getAttributes, columnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAttributesRow
	for rows.Next() {
		var i GetAttributesRow
		if err := rows.Scan(&i.AttributeType, &i.AttributeValue); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getColumnId = `-- name: GetColumnId :one
SELECT
    id
FROM
    columns
WHERE
    table_id = $1
    AND column_name = $2
`

type GetColumnIdParams struct {
	TableID    int32
	ColumnName string
}

func (q *Queries) GetColumnId(ctx context.Context, arg *GetColumnIdParams) (int32, error) {
	row := q.queryRow(ctx, q.getColumnIdStmt, getColumnId, arg.TableID, arg.ColumnName)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getColumns = `-- name: GetColumns :many
SELECT
    column_name,
    column_type,
    id
FROM
    columns
WHERE
    table_id = $1
`

type GetColumnsRow struct {
	ColumnName string
	ColumnType int32
	ID         int32
}

func (q *Queries) GetColumns(ctx context.Context, tableID int32) ([]*GetColumnsRow, error) {
	rows, err := q.query(ctx, q.getColumnsStmt, getColumns, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetColumnsRow
	for rows.Next() {
		var i GetColumnsRow
		if err := rows.Scan(&i.ColumnName, &i.ColumnType, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
