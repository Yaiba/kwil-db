// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: roles.sql

package gen

import (
	"context"
)

const applyPermissionToRole = `-- name: ApplyPermissionToRole :exec
INSERT INTO
    role_queries (role_id, query_id)
VALUES
    (
        (
            SELECT
                id
            FROM
                roles r
            WHERE
                r.role_name = $2
                AND r.db_id = $1
        ),
        (
            SELECT
                id
            FROM
                queries q
            WHERE
                q.query_name = $3
                AND q.db_id = $1
        )
    )
`

type ApplyPermissionToRoleParams struct {
	DbID      int32
	RoleName  string
	QueryName string
}

func (q *Queries) ApplyPermissionToRole(ctx context.Context, arg *ApplyPermissionToRoleParams) error {
	_, err := q.exec(ctx, q.applyPermissionToRoleStmt, applyPermissionToRole, arg.DbID, arg.RoleName, arg.QueryName)
	return err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO
    roles (role_name, db_id, is_default)
VALUES
    (
        $1,
        $2,
        $3
    )
`

type CreateRoleParams struct {
	RoleName  string
	DbID      int32
	IsDefault bool
}

func (q *Queries) CreateRole(ctx context.Context, arg *CreateRoleParams) error {
	_, err := q.exec(ctx, q.createRoleStmt, createRole, arg.RoleName, arg.DbID, arg.IsDefault)
	return err
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT
    query_name
FROM
    queries
    JOIN role_queries ON queries.id = role_queries.query_id
WHERE
    role_queries.role_id = $1
`

func (q *Queries) GetRolePermissions(ctx context.Context, roleID int32) ([]string, error) {
	rows, err := q.query(ctx, q.getRolePermissionsStmt, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var query_name string
		if err := rows.Scan(&query_name); err != nil {
			return nil, err
		}
		items = append(items, query_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT
    role_name,
    id,
    is_default
FROM
    roles
WHERE
    db_id = $1
`

type GetRolesRow struct {
	RoleName  string
	ID        int32
	IsDefault bool
}

func (q *Queries) GetRoles(ctx context.Context, dbID int32) ([]*GetRolesRow, error) {
	rows, err := q.query(ctx, q.getRolesStmt, getRoles, dbID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(&i.RoleName, &i.ID, &i.IsDefault); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
