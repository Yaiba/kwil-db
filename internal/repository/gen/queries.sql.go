// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package gen

import (
	"context"
)

const createQuery = `-- name: CreateQuery :exec
INSERT INTO
    queries (query_name, query, db_id) VALUES
    (
        $1,
        $2,
        $3
    )
`

type CreateQueryParams struct {
	QueryName string
	Query     []byte
	DbID      int32
}

func (q *Queries) CreateQuery(ctx context.Context, arg *CreateQueryParams) error {
	_, err := q.exec(ctx, q.createQueryStmt, createQuery, arg.QueryName, arg.Query, arg.DbID)
	return err
}

const getQueries = `-- name: GetQueries :many
SELECT
    query,
    id
FROM
    queries
WHERE
    db_id = $1
`

type GetQueriesRow struct {
	Query []byte
	ID    int32
}

func (q *Queries) GetQueries(ctx context.Context, dbID int32) ([]*GetQueriesRow, error) {
	rows, err := q.query(ctx, q.getQueriesStmt, getQueries, dbID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetQueriesRow
	for rows.Next() {
		var i GetQueriesRow
		if err := rows.Scan(&i.Query, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
