// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tables.sql

package gen

import (
	"context"
)

const createTable = `-- name: CreateTable :exec
INSERT INTO
    tables (db_id, table_name)
VALUES
    ($1, $2)
`

type CreateTableParams struct {
	DbID      int32
	TableName string
}

func (q *Queries) CreateTable(ctx context.Context, arg *CreateTableParams) error {
	_, err := q.exec(ctx, q.createTableStmt, createTable, arg.DbID, arg.TableName)
	return err
}

const getTableId = `-- name: GetTableId :one
SELECT
    id
FROM
    tables
WHERE
    db_id = $1
    AND table_name = $2
`

type GetTableIdParams struct {
	DbID      int32
	TableName string
}

func (q *Queries) GetTableId(ctx context.Context, arg *GetTableIdParams) (int32, error) {
	row := q.queryRow(ctx, q.getTableIdStmt, getTableId, arg.DbID, arg.TableName)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listTables = `-- name: ListTables :many
SELECT
    table_name,
    id
FROM
    tables
WHERE
    db_id = $1
`

type ListTablesRow struct {
	TableName string
	ID        int32
}

func (q *Queries) ListTables(ctx context.Context, dbID int32) ([]*ListTablesRow, error) {
	rows, err := q.query(ctx, q.listTablesStmt, listTables, dbID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListTablesRow
	for rows.Next() {
		var i ListTablesRow
		if err := rows.Scan(&i.TableName, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
