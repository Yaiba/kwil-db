syntax = "proto3";
package schemasvc;
option go_package = "kwil/x/proto/schemasvc";

import "kwil/schemasvc/schema.proto";

service SchemaService {
    rpc Plan(PlanRequest) returns (PlanResponse) {}
    rpc Apply(ApplyRequest) returns (ApplyResponse) {}

    rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
        option (google.api.http) = {
          get: "/api/v0/roles"
        };
    }

    rpc GetRole(GetRoleRequest) returns (Role) {
        option (google.api.http) = {
          get: "/api/v0/roles/{name}"
        };
    }

    rpc ListQueries(ListQueriesRequest) returns (ListQueriesResponse) {}
    rpc GetQuery(GetQueryRequest) returns (Query) {}
}


message ListRolesRequest {
    message Filter {
        oneof filter {
            string user = 1;
            string query = 2;
        }
    }

    string page_token = 1;
    int32 page_size = 2;
    optional Filter filter = 3;
}

message ListRolesResponse {
    repeated Role roles = 1;
    string next_page_token = 2;
}

message ListQueriesRequest {
    message Filter {
        oneof filter {
            string user = 1;
            string role = 2;
        }
    }

    string page_token = 1;
    int32 page_size = 2;
    optional Filter filter = 3;
}

message ListQueriesResponse {
    repeated Query queries = 1;
    string next_page_token = 2;
}

message GetRoleRequest {
    string name = 1;
}

message GetQueryRequest {
    string name = 1;
}

message PlanRequest {
    string schema = 1;
}

message PlanResponse {
    string id = 1;
}


message Change {
    string cmd = 1;
    repeated string args = 2;
    string comment = 3;
    string reverse = 4;
}

message Plan {
    string id = 1;
    string version = 2;
    string name = 3;
    bool reversible = 4;
    bool transactional = 5;
    repeated Change changes = 6;
}

message ApplyRequest {
    string plan_id = 1;
}

message ApplyResponse {}


