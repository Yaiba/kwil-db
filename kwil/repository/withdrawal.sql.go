// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: withdrawal.sql

package repository

import (
	"context"
	"database/sql"
)

const addTxHash = `-- name: AddTxHash :exec
UPDATE
    withdrawals
SET
    tx_hash = $1
WHERE
    correlation_id = $2
`

type AddTxHashParams struct {
	TxHash        sql.NullString
	CorrelationID string
}

func (q *Queries) AddTxHash(ctx context.Context, arg *AddTxHashParams) error {
	_, err := q.exec(ctx, q.addTxHashStmt, addTxHash, arg.TxHash, arg.CorrelationID)
	return err
}

const confirmWithdrawal = `-- name: ConfirmWithdrawal :exec
DELETE FROM
    withdrawals
WHERE
    correlation_id = $1
`

func (q *Queries) ConfirmWithdrawal(ctx context.Context, correlationID string) error {
	_, err := q.exec(ctx, q.confirmWithdrawalStmt, confirmWithdrawal, correlationID)
	return err
}

const expireWithdrawals = `-- name: ExpireWithdrawals :exec
UPDATE
    accounts a
SET
    balance = balance + wd.amount,
    spent = spent + wd.fee
FROM
    withdrawals wd
WHERE
    wd.account_id = a.id
    AND wd.expiry <= $1
`

func (q *Queries) ExpireWithdrawals(ctx context.Context, expiry int64) error {
	_, err := q.exec(ctx, q.expireWithdrawalsStmt, expireWithdrawals, expiry)
	return err
}

const newWithdrawal = `-- name: NewWithdrawal :exec
INSERT INTO
    withdrawals (correlation_id, account_id, amount, fee, expiry)
VALUES
    ($1, $2, $3, $4, $5)
`

type NewWithdrawalParams struct {
	CorrelationID string
	AccountID     int32
	Amount        string
	Fee           string
	Expiry        int64
}

func (q *Queries) NewWithdrawal(ctx context.Context, arg *NewWithdrawalParams) error {
	_, err := q.exec(ctx, q.newWithdrawalStmt, newWithdrawal,
		arg.CorrelationID,
		arg.AccountID,
		arg.Amount,
		arg.Fee,
		arg.Expiry,
	)
	return err
}
