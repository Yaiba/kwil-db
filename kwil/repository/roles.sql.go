// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: roles.sql

package repository

import (
	"context"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO
    roles (role_name, db_id, is_default)
VALUES
    (
        $1,
        (
            SELECT
                id
            FROM
                databases
            WHERE
                db_name = $2
        ),
        $3
    )
`

type CreateRoleParams struct {
	RoleName  string
	DbName    string
	IsDefault bool
}

func (q *Queries) CreateRole(ctx context.Context, arg *CreateRoleParams) error {
	_, err := q.exec(ctx, q.createRoleStmt, createRole, arg.RoleName, arg.DbName, arg.IsDefault)
	return err
}

const roleApplyAccount = `-- name: RoleApplyAccount :exec
INSERT INTO
    role_accounts (role_id, account_id)
VALUES
    (
        (
            SELECT
                id
            FROM
                roles
            WHERE
                role_name = $1
        ),
        (
            SELECT
                id
            FROM
                accounts
            WHERE
                account_address = $2
        )
    )
`

type RoleApplyAccountParams struct {
	RoleName       string
	AccountAddress string
}

func (q *Queries) RoleApplyAccount(ctx context.Context, arg *RoleApplyAccountParams) error {
	_, err := q.exec(ctx, q.roleApplyAccountStmt, roleApplyAccount, arg.RoleName, arg.AccountAddress)
	return err
}

const roleApplyQuery = `-- name: RoleApplyQuery :exec
INSERT INTO
    role_queries (role_id, query_id)
VALUES
    (
        (
            SELECT
                id
            FROM
                roles
            WHERE
                role_name = $1
        ),
        (
            SELECT
                id
            FROM
                queries
            WHERE
                query_name = $2
        )
    )
`

type RoleApplyQueryParams struct {
	RoleName  string
	QueryName string
}

func (q *Queries) RoleApplyQuery(ctx context.Context, arg *RoleApplyQueryParams) error {
	_, err := q.exec(ctx, q.roleApplyQueryStmt, roleApplyQuery, arg.RoleName, arg.QueryName)
	return err
}
