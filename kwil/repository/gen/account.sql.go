// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account.sql

package gen

import (
	"context"
)

const getAccount = `-- name: GetAccount :one
SELECT
    balance,
    spent,
    id,
    nonce
FROM
    accounts
WHERE
    account_address = $1
`

type GetAccountRow struct {
	Balance string
	Spent   string
	ID      int32
	Nonce   int64
}

func (q *Queries) GetAccount(ctx context.Context, accountAddress string) (*GetAccountRow, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, accountAddress)
	var i GetAccountRow
	err := row.Scan(
		&i.Balance,
		&i.Spent,
		&i.ID,
		&i.Nonce,
	)
	return &i, err
}

const updateAccountByAddress = `-- name: UpdateAccountByAddress :exec
UPDATE
    accounts
SET
    balance = $1,
    spent = $2,
    nonce = $3
WHERE
    account_address = $4
`

type UpdateAccountByAddressParams struct {
	Balance        string
	Spent          string
	Nonce          int64
	AccountAddress string
}

func (q *Queries) UpdateAccountByAddress(ctx context.Context, arg *UpdateAccountByAddressParams) error {
	_, err := q.exec(ctx, q.updateAccountByAddressStmt, updateAccountByAddress,
		arg.Balance,
		arg.Spent,
		arg.Nonce,
		arg.AccountAddress,
	)
	return err
}

const updateAccountById = `-- name: UpdateAccountById :exec
UPDATE
    accounts
SET
    balance = $1,
    spent = $2,
    nonce = $3
WHERE
    id = $4
`

type UpdateAccountByIdParams struct {
	Balance string
	Spent   string
	Nonce   int64
	ID      int32
}

func (q *Queries) UpdateAccountById(ctx context.Context, arg *UpdateAccountByIdParams) error {
	_, err := q.exec(ctx, q.updateAccountByIdStmt, updateAccountById,
		arg.Balance,
		arg.Spent,
		arg.Nonce,
		arg.ID,
	)
	return err
}
