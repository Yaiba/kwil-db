// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: indexes.sql

package gen

import (
	"context"

	"github.com/lib/pq"
)

const createIndex = `-- name: CreateIndex :exec
INSERT INTO
    INDEXES (table_id, index_name, index_type, COLUMNS)
VALUES
    (
        $1,
        $2,
        $3,
        $4
    )
`

type CreateIndexParams struct {
	TableID   int32
	IndexName string
	IndexType int32
	Columns   []string
}

func (q *Queries) CreateIndex(ctx context.Context, arg *CreateIndexParams) error {
	_, err := q.exec(ctx, q.createIndexStmt, createIndex,
		arg.TableID,
		arg.IndexName,
		arg.IndexType,
		pq.Array(arg.Columns),
	)
	return err
}

const getIndexes = `-- name: GetIndexes :many
SELECT
    index_name,
    index_type,
    columns
FROM
    indexes
WHERE
    table_id = $1
`

type GetIndexesRow struct {
	IndexName string
	IndexType int32
	Columns   []string
}

func (q *Queries) GetIndexes(ctx context.Context, tableID int32) ([]*GetIndexesRow, error) {
	rows, err := q.query(ctx, q.getIndexesStmt, getIndexes, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetIndexesRow
	for rows.Next() {
		var i GetIndexesRow
		if err := rows.Scan(&i.IndexName, &i.IndexType, pq.Array(&i.Columns)); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
