// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addTxHashStmt, err = db.PrepareContext(ctx, addTxHash); err != nil {
		return nil, fmt.Errorf("error preparing query AddTxHash: %w", err)
	}
	if q.commitDepositsStmt, err = db.PrepareContext(ctx, commitDeposits); err != nil {
		return nil, fmt.Errorf("error preparing query CommitDeposits: %w", err)
	}
	if q.confirmWithdrawalStmt, err = db.PrepareContext(ctx, confirmWithdrawal); err != nil {
		return nil, fmt.Errorf("error preparing query ConfirmWithdrawal: %w", err)
	}
	if q.createAttributeStmt, err = db.PrepareContext(ctx, createAttribute); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAttribute: %w", err)
	}
	if q.createColumnStmt, err = db.PrepareContext(ctx, createColumn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateColumn: %w", err)
	}
	if q.createDatabaseStmt, err = db.PrepareContext(ctx, createDatabase); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDatabase: %w", err)
	}
	if q.createIndexStmt, err = db.PrepareContext(ctx, createIndex); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIndex: %w", err)
	}
	if q.createQueryStmt, err = db.PrepareContext(ctx, createQuery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuery: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createTableStmt, err = db.PrepareContext(ctx, createTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTable: %w", err)
	}
	if q.decreaseBalanceStmt, err = db.PrepareContext(ctx, decreaseBalance); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseBalance: %w", err)
	}
	if q.depositStmt, err = db.PrepareContext(ctx, deposit); err != nil {
		return nil, fmt.Errorf("error preparing query Deposit: %w", err)
	}
	if q.dropDatabaseStmt, err = db.PrepareContext(ctx, dropDatabase); err != nil {
		return nil, fmt.Errorf("error preparing query DropDatabase: %w", err)
	}
	if q.expireWithdrawalsStmt, err = db.PrepareContext(ctx, expireWithdrawals); err != nil {
		return nil, fmt.Errorf("error preparing query ExpireWithdrawals: %w", err)
	}
	if q.getAccountStmt, err = db.PrepareContext(ctx, getAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccount: %w", err)
	}
	if q.getDepositByTxStmt, err = db.PrepareContext(ctx, getDepositByTx); err != nil {
		return nil, fmt.Errorf("error preparing query GetDepositByTx: %w", err)
	}
	if q.getHeightStmt, err = db.PrepareContext(ctx, getHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeight: %w", err)
	}
	if q.getHeightByNameStmt, err = db.PrepareContext(ctx, getHeightByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeightByName: %w", err)
	}
	if q.increaseBalanceStmt, err = db.PrepareContext(ctx, increaseBalance); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseBalance: %w", err)
	}
	if q.listTablesStmt, err = db.PrepareContext(ctx, listTables); err != nil {
		return nil, fmt.Errorf("error preparing query ListTables: %w", err)
	}
	if q.newWithdrawalStmt, err = db.PrepareContext(ctx, newWithdrawal); err != nil {
		return nil, fmt.Errorf("error preparing query NewWithdrawal: %w", err)
	}
	if q.roleApplyQueryStmt, err = db.PrepareContext(ctx, roleApplyQuery); err != nil {
		return nil, fmt.Errorf("error preparing query RoleApplyQuery: %w", err)
	}
	if q.roleApplyWalletStmt, err = db.PrepareContext(ctx, roleApplyWallet); err != nil {
		return nil, fmt.Errorf("error preparing query RoleApplyWallet: %w", err)
	}
	if q.setHeightStmt, err = db.PrepareContext(ctx, setHeight); err != nil {
		return nil, fmt.Errorf("error preparing query SetHeight: %w", err)
	}
	if q.spendStmt, err = db.PrepareContext(ctx, spend); err != nil {
		return nil, fmt.Errorf("error preparing query Spend: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountByAddressStmt, err = db.PrepareContext(ctx, updateAccountByAddress); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountByAddress: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addTxHashStmt != nil {
		if cerr := q.addTxHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTxHashStmt: %w", cerr)
		}
	}
	if q.commitDepositsStmt != nil {
		if cerr := q.commitDepositsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing commitDepositsStmt: %w", cerr)
		}
	}
	if q.confirmWithdrawalStmt != nil {
		if cerr := q.confirmWithdrawalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing confirmWithdrawalStmt: %w", cerr)
		}
	}
	if q.createAttributeStmt != nil {
		if cerr := q.createAttributeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAttributeStmt: %w", cerr)
		}
	}
	if q.createColumnStmt != nil {
		if cerr := q.createColumnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createColumnStmt: %w", cerr)
		}
	}
	if q.createDatabaseStmt != nil {
		if cerr := q.createDatabaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDatabaseStmt: %w", cerr)
		}
	}
	if q.createIndexStmt != nil {
		if cerr := q.createIndexStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIndexStmt: %w", cerr)
		}
	}
	if q.createQueryStmt != nil {
		if cerr := q.createQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQueryStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createTableStmt != nil {
		if cerr := q.createTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTableStmt: %w", cerr)
		}
	}
	if q.decreaseBalanceStmt != nil {
		if cerr := q.decreaseBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseBalanceStmt: %w", cerr)
		}
	}
	if q.depositStmt != nil {
		if cerr := q.depositStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing depositStmt: %w", cerr)
		}
	}
	if q.dropDatabaseStmt != nil {
		if cerr := q.dropDatabaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dropDatabaseStmt: %w", cerr)
		}
	}
	if q.expireWithdrawalsStmt != nil {
		if cerr := q.expireWithdrawalsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing expireWithdrawalsStmt: %w", cerr)
		}
	}
	if q.getAccountStmt != nil {
		if cerr := q.getAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountStmt: %w", cerr)
		}
	}
	if q.getDepositByTxStmt != nil {
		if cerr := q.getDepositByTxStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDepositByTxStmt: %w", cerr)
		}
	}
	if q.getHeightStmt != nil {
		if cerr := q.getHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightStmt: %w", cerr)
		}
	}
	if q.getHeightByNameStmt != nil {
		if cerr := q.getHeightByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightByNameStmt: %w", cerr)
		}
	}
	if q.increaseBalanceStmt != nil {
		if cerr := q.increaseBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseBalanceStmt: %w", cerr)
		}
	}
	if q.listTablesStmt != nil {
		if cerr := q.listTablesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTablesStmt: %w", cerr)
		}
	}
	if q.newWithdrawalStmt != nil {
		if cerr := q.newWithdrawalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newWithdrawalStmt: %w", cerr)
		}
	}
	if q.roleApplyQueryStmt != nil {
		if cerr := q.roleApplyQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleApplyQueryStmt: %w", cerr)
		}
	}
	if q.roleApplyWalletStmt != nil {
		if cerr := q.roleApplyWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleApplyWalletStmt: %w", cerr)
		}
	}
	if q.setHeightStmt != nil {
		if cerr := q.setHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setHeightStmt: %w", cerr)
		}
	}
	if q.spendStmt != nil {
		if cerr := q.spendStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing spendStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountByAddressStmt != nil {
		if cerr := q.updateAccountByAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountByAddressStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addTxHashStmt              *sql.Stmt
	commitDepositsStmt         *sql.Stmt
	confirmWithdrawalStmt      *sql.Stmt
	createAttributeStmt        *sql.Stmt
	createColumnStmt           *sql.Stmt
	createDatabaseStmt         *sql.Stmt
	createIndexStmt            *sql.Stmt
	createQueryStmt            *sql.Stmt
	createRoleStmt             *sql.Stmt
	createTableStmt            *sql.Stmt
	decreaseBalanceStmt        *sql.Stmt
	depositStmt                *sql.Stmt
	dropDatabaseStmt           *sql.Stmt
	expireWithdrawalsStmt      *sql.Stmt
	getAccountStmt             *sql.Stmt
	getDepositByTxStmt         *sql.Stmt
	getHeightStmt              *sql.Stmt
	getHeightByNameStmt        *sql.Stmt
	increaseBalanceStmt        *sql.Stmt
	listTablesStmt             *sql.Stmt
	newWithdrawalStmt          *sql.Stmt
	roleApplyQueryStmt         *sql.Stmt
	roleApplyWalletStmt        *sql.Stmt
	setHeightStmt              *sql.Stmt
	spendStmt                  *sql.Stmt
	updateAccountStmt          *sql.Stmt
	updateAccountByAddressStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addTxHashStmt:              q.addTxHashStmt,
		commitDepositsStmt:         q.commitDepositsStmt,
		confirmWithdrawalStmt:      q.confirmWithdrawalStmt,
		createAttributeStmt:        q.createAttributeStmt,
		createColumnStmt:           q.createColumnStmt,
		createDatabaseStmt:         q.createDatabaseStmt,
		createIndexStmt:            q.createIndexStmt,
		createQueryStmt:            q.createQueryStmt,
		createRoleStmt:             q.createRoleStmt,
		createTableStmt:            q.createTableStmt,
		decreaseBalanceStmt:        q.decreaseBalanceStmt,
		depositStmt:                q.depositStmt,
		dropDatabaseStmt:           q.dropDatabaseStmt,
		expireWithdrawalsStmt:      q.expireWithdrawalsStmt,
		getAccountStmt:             q.getAccountStmt,
		getDepositByTxStmt:         q.getDepositByTxStmt,
		getHeightStmt:              q.getHeightStmt,
		getHeightByNameStmt:        q.getHeightByNameStmt,
		increaseBalanceStmt:        q.increaseBalanceStmt,
		listTablesStmt:             q.listTablesStmt,
		newWithdrawalStmt:          q.newWithdrawalStmt,
		roleApplyQueryStmt:         q.roleApplyQueryStmt,
		roleApplyWalletStmt:        q.roleApplyWalletStmt,
		setHeightStmt:              q.setHeightStmt,
		spendStmt:                  q.spendStmt,
		updateAccountStmt:          q.updateAccountStmt,
		updateAccountByAddressStmt: q.updateAccountByAddressStmt,
	}
}
