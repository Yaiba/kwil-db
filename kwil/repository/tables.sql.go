// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tables.sql

package repository

import (
	"context"
)

const createTable = `-- name: CreateTable :exec
INSERT INTO
    tables (db_id, table_name)
VALUES
    ((SELECT id FROM databases WHERE db_name = $1), $2)
`

type CreateTableParams struct {
	DbName    string
	TableName string
}

func (q *Queries) CreateTable(ctx context.Context, arg *CreateTableParams) error {
	_, err := q.exec(ctx, q.createTableStmt, createTable, arg.DbName, arg.TableName)
	return err
}

const listTables = `-- name: ListTables :many
SELECT
    table_name
FROM
    tables
WHERE
    db_id = (SELECT id FROM databases WHERE db_name = $1 AND db_owner = $2)
`

type ListTablesParams struct {
	DbName  string
	DbOwner string
}

func (q *Queries) ListTables(ctx context.Context, arg *ListTablesParams) ([]string, error) {
	rows, err := q.query(ctx, q.listTablesStmt, listTables, arg.DbName, arg.DbOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var table_name string
		if err := rows.Scan(&table_name); err != nil {
			return nil, err
		}
		items = append(items, table_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
